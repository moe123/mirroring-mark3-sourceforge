import struct

class buffalogger:
    def __init__(self,symfile,header):
        self.symfile = symfile
        self.headerfile = header
        self.reload()

    def reload(self):
        # Clear member data
        self.str = ""
        self.header = ""
        self.filemap = list()
        self.stringmap = list()

        # Load the symbols file
        obj = open(self.symfile, "r")
        self.str = obj.read()
        obj.close()

        # Load the headers file
        obj = open(self.headerfile, "r")
        self.header = obj.read()
        obj.close()

        # Parse through the header file and extract mapping of filenames to numbers
        idx = 0;

        # Remove the format strings - this is all brute-force-ish based on the format
        # of the autogenerated contents of dbg_file_list.h
        self.header = self.header.translate(None, "()")
        header_lines = self.header.split("\n")
        for header_line in header_lines[2:]:
            header_tokens = header_line.split()
            if len(header_tokens) < 2:
                continue

            # Parse out the file name and number strings
            name_token = header_tokens[1]
            name_str = name_token[7:] # truncte the "_DBG___" prefix
            name_str = name_str.lower() # Convert to lowercase
            name_str = name_str.replace("_",".") # Convert _ to . to make the filenames look nicer
            file_num = int(header_tokens[2])

            # Add the tuple (file #, filename) to the list
            self.filemap.append((file_num, name_str))

        # Parse through the symbol file and extract debug strings with file number/name,
        # and line numbers.
        idx = 0
        start_idx = 0
        token = 0
        line_no = 0
        file_no = 0
        format_str = ""

        # Parse out the binary symbol file, which contains data in the following format:
        #   null-terminated format string
        #   2-byte file no
        #   2-byte line no
        #   2-byte synchronization cookie
        # Integers are unsigned, little-endian

        while idx < len(self.str):
            if (self.str[idx]) == b'\x00':
                format_str = self.str[start_idx:idx]
                pstate = 1

                (line_no, file_no, token) = struct.unpack('<HHH', self.str[idx+1:idx+7])

                pstate = 0
                start_idx = idx + 7
                idx += 7
                self.stringmap.append( (self.filemap[file_no], line_no, format_str) )
            else:
                idx += 1

    def decode(data):


# Testing...
symfile = "/home/vm/mark3/trunk/embedded/stage/dbg/avr/atmega328p/gcc/ut_thread.dbg"
headerfile = "/home/vm/mark3/trunk/embedded/kernel/public/dbg_file_list.h"

logger = buffalogger(symfile, headerfile)
print logger.stringmap
